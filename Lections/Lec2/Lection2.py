if x > 0:
    оператор 1
    оператор 2
    .
    .
    .
    .
    .
    .
    .
    .    .
    .
    .
    .    .
    .
    .
    .    .
    .
    .
    .    .
    .
    .
    .    .
    .
    .
    .    .
    .
    .
    .    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    оператор N
elif y < 0: # x <= 0, коментирование призрака (призрак - фактическеое условие которое всегда является верным в момент \
    момент наступления некоторого участка кода, не стоит коментировать если тело и условие помещается на 1 экран)
"""  Нарипмер ниже условия все читаемы коментриовать не надо
if x > 0:
    оператор 1
    оператор 2
    .
    .
elif y < 0:
    .
    .
else:
"""
    .
    .
else:# x <= 0, коментирование призрака (призрак - фактическеое условие которое всегда является верным в момент \
    момент наступления некоторого участка кода, не стоит коментировать если тело и условие помещается на 1 экран)

""" переменные лучше называть понятными словами которые отображают смысл переменной
x = int(input())    # x = 5
while x > 0:        # x = x + 5 | <=> x += 5  синтаксический "сахар" "ништячки" 
    print(x)        # x = x - 5 | <=> x -= 5    
    x -= 1          # x = x*5 | <=> x *= 5
                    # x = x/5 | <=> x /= 5
                    # x = x//5 | <=> x //= 5
                    # x = x**x | <=> x **= x

x = float(input())

while x > 0:
    print(x)
    x -= 1
    break #завершение цикла без выполнения хвостика цикла который выолняется однократно после else
else:
    print('x<=0')
    
    # х уже не может быть меньше или равен нулю призрак else теряет смысл

while x > 0:
    print(x)
    x -= 1
    if x == 13:
    throw Error # аварийное завершение цикла (всей программы) с обработкой ошибки

while x > 0:
    print(x)
    x -= 1
    if x == 13:
    exit() # аварийное завершение программы

цикл for 
for x in 5,2,3,1,4: # 5,2,3,1,4 - кортеж значений    
    print(x**2)

for x in 1,2,1,2,1: # непонятен номер итерации (заголовок)    
    print(x**2)                                (тело)

итрация единократное выполнение тела цикла

x = 1   #Start
while x < 101 #Stop
    print()
    x += 1 #Step
    
тоже самое

for x in range(1,101,1) # range(Start,Stop,Step), арифметический кортеж от Start до Stop - 1 c шагом Step
    print()   

for x in range(10) # арифметический кортеж от 0 до 9 - c шагом 1 или range(0,10,1)
    print()   

            Функции

def f(x, y): # формальные параметры
    return x + у # возврат значения функции
    
f(2, f(3, 4)) # вернет значение 9


def p3(x): # аналог процедуры, но если не указан оператор return функция p3 вернет значение (None)
    print(x)
    print(x)
    print(x)    

x = p3('Hello') # при этом функция выполнится, напечатает 3 раза 'Hello'
type(x) # <class 'NoneType'> тип "процедур" или функций которые ничего не возвращают, значение таких функций 
единственное - None или "ничего" "пустота"  
print(x) # выдаст None

def p3(x):
    print(x)
    print(x)
    return None # операнд return сразу же завершает функцию на этом примере возвращает значение return 
                  после 2х выводов на экран значения х   
    print(x)    


def f(x, y): # формальные параметры могут быть абсолютно любые, int float bool str тк оператор + работает 
    с любыми из типов из указанных типов
    return x + у # возврат значения функции

DuckTyping - простота кода надо следить код надо писать читабельным для человека, что вы подразумеваете в
функциях 

def f(x:'int,>0', y: int) описание переменных для читабельности кода,
    return x + у

def add(x, y) #называть функции надо понятно на английском языке чтоб название отображало суть функции
# складывает два целочисленных числа     #коментарий что делает
    return x + у
        
def add(x, y) 
через тройные кавычки можно написать полное описание функции в несколько строк
    return x + у

переменные тоже надо называть понятно чтоб они отображали суть

например

def add(x_integer, y_integer):
    return x_integer + y_integer

такая функция читаема и ясна и нетребует никаких коментариев  

конец лекции
"""




